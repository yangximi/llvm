// Code generated by "string2enum -linecomment -type DISPFlag ../../ir/enum"; DO NOT EDIT.

package enum

import (
	"fmt"

	"github.com/llir/llvm/ir/enum"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the string2enum command to generate them again.
	var x [1]struct{}
	_ = x[enum.DISPFlagZero-0]
	_ = x[enum.DISPFlagVirtual-1]
	_ = x[enum.DISPFlagPureVirtual-2]
	_ = x[enum.DISPFlagLocalToUnit-4]
	_ = x[enum.DISPFlagDefinition-8]
	_ = x[enum.DISPFlagOptimized-16]
	_ = x[enum.DISPFlagPure-32]
	_ = x[enum.DISPFlagElemental-64]
	_ = x[enum.DISPFlagRecursive-128]
	_ = x[enum.DISPFlagMainSubprogram-256]
	_ = x[enum.DISPFlagDeleted-512]
	_ = x[enum.DISPFlagNonvirtual-0]
	_ = x[enum.DISPFlagVirtuality-3]
}

const (
	_DISPFlag_name_0 = "DISPFlagZeroDISPFlagVirtualDISPFlagPureVirtualDISPFlagVirtualityDISPFlagLocalToUnit"
	_DISPFlag_name_1 = "DISPFlagDefinition"
	_DISPFlag_name_2 = "DISPFlagOptimized"
	_DISPFlag_name_3 = "DISPFlagPure"
	_DISPFlag_name_4 = "DISPFlagElemental"
	_DISPFlag_name_5 = "DISPFlagRecursive"
	_DISPFlag_name_6 = "DISPFlagMainSubprogram"
	_DISPFlag_name_7 = "DISPFlagDeleted"
)

var (
	_DISPFlag_index_0 = [...]uint8{0, 12, 27, 46, 64, 83}
)

// DISPFlagFromString returns the DISPFlag enum corresponding to s.
func DISPFlagFromString(s string) enum.DISPFlag {
	if len(s) == 0 {
		return 0
	}
	for i := range _DISPFlag_index_0[:len(_DISPFlag_index_0)-1] {
		if s == _DISPFlag_name_0[_DISPFlag_index_0[i]:_DISPFlag_index_0[i+1]] {
			return enum.DISPFlag(i + 0)
		}
	}
	if s == _DISPFlag_name_1 {
		return enum.DISPFlag(8)
	}
	if s == _DISPFlag_name_2 {
		return enum.DISPFlag(16)
	}
	if s == _DISPFlag_name_3 {
		return enum.DISPFlag(32)
	}
	if s == _DISPFlag_name_4 {
		return enum.DISPFlag(64)
	}
	if s == _DISPFlag_name_5 {
		return enum.DISPFlag(128)
	}
	if s == _DISPFlag_name_6 {
		return enum.DISPFlag(256)
	}
	if s == _DISPFlag_name_7 {
		return enum.DISPFlag(512)
	}
	panic(fmt.Errorf("unable to locate DISPFlag enum corresponding to %q", s))
}
